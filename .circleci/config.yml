version: 2.1
jobs:
  build-node14:
    docker:
      - image: circleci/node:14
    working_directory: ~/repo
    steps:
      - checkout
      - run: yarn
      - run: yarn run ci
      - run:
          name: Define environment variable with lastest commit's message
          command: |
            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Lint commit message
          command: echo "$COMMIT_MESSAGE" | npx commitlint
      - run:
          command: cat ./coverage/lcov.info | ./node_modules/.bin/coveralls
          environment:
            COVERALLS_SERVICE_NAME: circle-ci
            COVERALLS_GIT_BRANCH: ${CIRCLE_BRANCH}

  build-node12:
    docker:
      - image: circleci/node:12
    working_directory: ~/repo
    steps:
      - checkout
      - run: yarn
      - run: yarn run ci

  build-node10:
    docker:
      - image: circleci/node:10
    working_directory: ~/repo
    steps:
      - checkout
      - run: yarn
      - run: yarn run ci
  
  compliance:
    docker:
      - image: circleci/python:3.6.4
    working_directory: ~/workdir
    steps:
      - checkout
      - run:
          name: compliance check
          command: |
            pip3 install --user reuse
            ~/.local/bin/reuse lint

  deploy-npm:
    docker:
      - image: circleci/node:14
    working_directory: ~/repo
    steps:
      - checkout
      - run: yarn --pure-lockfile
      - run: yarn run ci
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      # To help debug when lerna detects changes to the working tree and fails the publish
      - run: git status
      - run: yarn run release:publish

  prepare-vsix:
    docker:
      - image: circleci/node:14
    working_directory: ~/repo
    steps:
      - checkout
      - run: yarn
      - run: yarn run ci
      - run: mkdir -p artifacts && cp packages/*/*.vsix ./artifacts
      - run:
          name: "Inspect Artifacts Folder"
          working_directory: ./artifacts
          command: ls -la
      - persist_to_workspace:
          root: "./artifacts"
          paths:
            # https://golang.org/pkg/path/filepath/#Match
            - "*.vsix"

  deploy-gh-releases:
    docker:
      - image: circleci/golang:1.13
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: "Inspect Artifacts Folder"
          working_directory: ./artifacts
          command: ls -la
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            VERSION=${CIRCLE_TAG}
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/

workflows:
  version: 2
  voter:
    jobs:
      - build-node10
      - build-node12
      - build-node14
      - compliance
  release:
    jobs:
      - deploy-npm:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - prepare-vsix:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - deploy-gh-releases:
          requires:
            - prepare-vsix
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
